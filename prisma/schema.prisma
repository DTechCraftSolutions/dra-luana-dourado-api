// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleStatus {
  AGUARDANDO
  EM_ATENDIMENTO
  CANCELADO
  FINALIZADO
  REAGENDADO
  PENDENTE
}

enum OfficeType {
  DENTIST
  SECRETARY
}

model Professional {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  password_hash String
  office        OfficeType
  CRO           String?
  Schedule      Schedule[]
  Procedure     Procedure[]
  AvailableTime AvailableTime[]
  ProcedurePlan ProcedurePlan[]

  @@map("professionals")
}

model Patient {
  id                     String     @id @default(uuid())
  full_name              String
  cpf                    String
  rg                     String
  birth_date             String
  telephone              String
  comments               String
  sex                    String
  role                   String
  card_number            String
  cep                    String
  road                   String
  neighborhood           String
  city                   String
  state                  String
  number                 String
  complement             String
  //otionals
  responsible_name       String?
  responsible_cpf        String?
  responsible_rg         String?
  birth_date_responsible String?
  telphone_responsible   String?
  comments_responsible   String?
  Schedule               Schedule[]

  @@map("patients")
}

model Schedule {
  id              String         @id @default(uuid())
  date            String
  procedures      Procedure      @relation(fields: [procedureId], references: [id])
  professionals   Professional   @relation(fields: [professionalId], references: [id])
  patients        Patient        @relation(fields: [patientId], references: [id])
  available_times AvailableTime  @relation(fields: [availableTimeId], references: [id])
  status          RoleStatus
  procedureId     String
  professionalId  String
  patientId       String
  availableTimeId String
  procedurePlanId String?
  ProcedurePlan   ProcedurePlan? @relation(fields: [procedurePlanId], references: [id])
}

model AvailableTime {
  id             String       @id @default(uuid())
  label          String
  day_of_week    String
  initial_time   String
  end_time       String
  Schedule       Schedule[]
  professionals  Professional @relation(fields: [professionalId], references: [id])
  professionalId String

  @@map("available_times")
}

model Procedure {
  id             String       @id @default(uuid())
  name           String
  recurrence     String
  duration       String
  color          String
  price          Int
  description    String
  Schedule       Schedule[]
  professionals  Professional @relation(fields: [professionalId], references: [id])
  professionalId String

  @@map("schedules")
}

model Budget {
  id    String @id @default(uuid())
  price Int

  @@map("budgets")
}

model ProcedurePlan {
  id             String       @id @default(uuid())
  name           String
  recurrence     String
  duration       String
  color          String
  price          Int
  description    String
  active         String
  Schedule       Schedule[]
  professionals  Professional @relation(fields: [professionalId], references: [id])
  professionalId String
  Plan           Plan?        @relation(fields: [planId], references: [id])
  planId         String?
}

model Plan {
  id            String          @id @default(uuid())
  name          String
  duration      Int
  ProcedurePlan ProcedurePlan[]
}
